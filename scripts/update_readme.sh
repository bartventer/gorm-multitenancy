#!/usr/bin/env bash

#-----------------------------------------------------------------------------------------------------------------
# Copyright © 2023 Bart Venter <bartventer@outlook.com>

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-----------------------------------------------------------------------------------------------------------------
# Maintainer: Bart Venter <https://github.com/bartventer>
#-----------------------------------------------------------------------------------------------------------------
# This script updates the README file by concatenating the individual README files in the provided directory.
# The following flag is required:
#
#       -dirpath /path/to/directory
#           The directory containing the README files to concatenate. It should contain the following files:
#               - ./docs/intro_and_usage.md
#               - ./docs/benchmarks.md
#               - ./docs/examples.md
#
# Usage: ./update_readme.sh --dirpath [target_dir]
#
# Example: ./update_readme.sh --dirpath ./path/to/directory
#-----------------------------------------------------------------------------------------------------------------

set -euo pipefail

_DIRPATH=""

# Parse command line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
    -dirpath)
        _DIRPATH="$2"
        shift
        ;;
    *)
        echo "Unknown parameter passed: $1"
        exit 1
        ;;
    esac
    shift
done

# Define file paths
_INTRO_AND_USAGE="$_DIRPATH/docs/intro_and_usage.md"
_BENCHMARKS="$_DIRPATH/docs/benchmarks.md"
_EXAMPLES="$_DIRPATH/docs/examples.md"
_README="$_DIRPATH/README.md"

# Ensure the directory exists
if [[ ! -d "$_DIRPATH" ]]; then
    echo "❌ Directory $_DIRPATH not found. Exiting..."
    exit 1
fi

# Ensure the README files exist
for file in $_INTRO_AND_USAGE $_BENCHMARKS $_EXAMPLES; do
    if [[ ! -f "$file" ]]; then
        echo "❌ $file not found. Exiting..."
        exit 1
    fi
done

# Get the URL of the script on GitHub
get_script_url() {
    # Get the name of the script
    script_name="$1"

    # Get the root of the git repository
    git_root=$(git rev-parse --show-toplevel)

    # Search for the path of the script in the git repository
    script_path=$(find "$git_root" -name "$script_name" -print -quit)

    # Get the relative path from the root of the git repository
    script_path=$(realpath --relative-to="$git_root" "$script_path")

    if [[ "${CI:=false}" == "true" ]]; then
        remote_url_https="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY"
    else
        # Get the URL of the remote repository
        remote_url=$(git config --get remote.origin.url)

        # Convert SSH format to HTTPS format
        remote_url_https=$(echo "$remote_url" | sed -e 's/:/\//' -e 's/git@/https:\/\//')
    fi

    # Combine the remote URL and the script path
    echo "${remote_url_https%.git}/blob/master/${script_path}"
}

# Update the main README
update_readme() {
    script_name="$1"
    script_url="$2"

    # Concatenate the README files
    {
        cat "$_INTRO_AND_USAGE"
        echo
        echo
        cat "$_BENCHMARKS"
        echo
        echo
        cat "$_EXAMPLES"
    } >"$_README"
    cat <<EOF >>"$_README"

---

_Note: This file was auto-generated by the [$script_name](${script_url}) script. Do not edit this file directly._
EOF
}

# Create a pull request with the updated README
create_pull_request() {
    if [[ "${CI:=false}" != "true" ]]; then
        echo "ℹ️ Not in CI. Exiting..."
        exit 0
    fi

    echo "ℹ️ Creating a pull request with the updated benchmark results..."

    # Switch back to the current branch on exit
    current_branch=$(git rev-parse --abbrev-ref HEAD)
    trap 'git checkout $current_branch' EXIT

    git config --global user.email "github-actions[bot]@users.noreply.github.com"
    git config --global user.name "github-actions[bot]"
    git config pull.rebase false
    _branch_name="automated-documentation-update-$GITHUB_RUN_ID-$(date +%s)"
    git checkout -b "$_branch_name"
    git add "$_README" "$_INTRO_AND_USAGE" "$_BENCHMARKS" "$_EXAMPLES"
    _commit_message="docs(README): Update benchmark results"
    git commit -m "${_commit_message} [skip ci]" || export NO_UPDATES=true
    if [[ "${NO_UPDATES:=false}" == "true" ]]; then
        echo "ℹ️ No updates to the _README file. Exiting..."
        exit 0
    fi
    git push origin "$_branch_name"
    gh pr create \
        --title "$_commit_message" \
        --body "Automated documentation update for benchmark results." \
        --label "documentation"

    echo "✔️ OK."
}

# Main function
main() {
    echo "ℹ️ Updating the main README file..."
    script_name=$(basename "$(realpath "$0")")
    script_url=$(get_script_url "$script_name")
    update_readme "$script_name" "$script_url"
    create_pull_request
    echo "✔️ OK."
}
main "$@"
